<!--#include file="header.inc" -->

<P><B>Current Proposal for CGDB 1.0</b></p>

The CGDB GUI should have the following features:

  <UL>
  
    <LI>Configurable:
      <UL>
        <LI>Config file containing :ex commands<BR>
          <FONT Size=-1>-
          Any commands that can be typed in status bar is acceptable.
          Commands that don't make sense before CGDB is initialized should
          be ignored.</font>
        <LI>Key bindings for any :ex commands<BR>
          <FONT Size=-1>- 
          I think this should be done through :map 
          commands, but this is open for discussion currently.</font>
        <LI>Vim-style interface<BR>
          <FONT Size=-1>-
          Support running commands <i>n</i> times by typing a number <i>n</i>
          before a keystroke command.
          </font>
        <LI>Color schemes<BR>
          <FONT Size=-1>-
          Again, Vim-style, with a file named ~/.cgdb/colors/myscheme, and 
          loadable by executing "color myscheme".  Maybe we should even handle
          Vim's exact format, so people can just copy their Vim files to .cgdb.
          </font>
        <LI>Border schemes<BR>
          <FONT Size=-1>-
          Many terminals do not support nice borders. CGDB needs to be able to
          show the user what is necessary without any special terminal 
          characters. Although they are nice, they should not be necessary or 
          hard coded.
          </font>
      </ul>

    <LI>Robust source viewer:
      <UL>
        <LI>Fast syntax highlighting
        <LI>Regular expression searching
        <LI>Token identification (for displaying data)<BR>
          <FONT Size=-1>-
          A part of this requirement is that the cursor must be movable in both
          directions (row, column), so that the user can select a token for
          an arbitrary action, such as a search, or data display.
          </font>
        <LI>Assembly view (source, asm, and mixed modes)
        <LI>Hyperlinking (for viewing help files)
        <LI>Configurable<BR>
          <FONT Size=-1>-
          The source viewer should have certain attributes which can be
          controlled via the :set function (i.e. wrap, ignorecase, tabsize,
          etc).  
          </font>
      </ul>

    <LI>Windowing system:
      <UL>
        <LI>Arbitrary number of source windows
        <LI>Bindable to currently executing source
        <LI>Resizable.  Movable?
        <LI>Inferior process window (tty)
      </ul>

    <LI>Macro support (vim-style)

    <LI>Support reloading a new inferior program (gdb 'file' command)
  
  </ul>

The TGDB library should have the following features:

  <UL>

    <LI>GDB Interfaces
      <UL>
        <LI>Annotate 2
        <LI>GDB/MI
        <LI>Easily Extensible<BR>
          <FONT Size=-1>-
          Support easy plugging in of alternate methods for future versions,
          such as Annotate levels 1 and 3.
          </font>
      </ul>

    <LI>Support for advanced GUI features
      <UL>
        <LI>Reloading new inferior application
        <LI>Providing a TTY for the inferior window
        <LI>Providing assembly instruction as well as file:line info
      </ul>

    <LI>Stable API<BR>
      <FONT Size=-1>-
      Part of this is making the TGDB library context-driven, so that
      multiple instances of GDB can be invoked by a GUI.  Because of this,
      TGDB should not handle signals automatically, unless the GUI code
      requests it.
      </font>

    <LI>Context driven readline style interface to GDB console<BR>
      <FONT Size=-1>-
      TGDB is responsible for dealing with the users command line interaction.
      This is because it simplifies the GUI's responsibility. The GUI should
      know nothing about how TGDB allows the user to interface with GDB's
      console.
      </font>

    <LI>Support for sending and receiving data to the inferior process<BR>
        Annotate 2 possibilities:<BR>
        <UL>
	    <LI>TGDB handles both directions of communication.<BR>
	        Using the tty command to do input and output with inferior.
	    <LI>TGDB handles the output of the inferior.<BR>
	        Just receiving the output of the inferior if no tty is available.
	        Sending input to the inferior is not possible.
	    <LI>TGDB doesn't handle communication with the inferior at all.<BR>
	        Allowing the user to attach to the inferior process. If this is the
	        case, the input and output to the inferior will go to the terminal it
	        started in.
          </ul>

  </ul>

<!--#include file="footer.inc" -->

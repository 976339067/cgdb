\input texinfo   @c -*-texinfo-*-
@comment $Id$
@comment %**start of header
@setfilename cgdb.info
@include version.texi
@settitle CGDB Manual @value{VERSION}
@syncodeindex pg cp
@comment %**end of header
@copying

This manual is for @acronym{GNU} CGDB
(version @value{VERSION}, @value{UPDATED}),
the @acronym{GNU} ncurses based front end to GDB.

Copyright @copyright{} 2006 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being ``A GNU Manual,''
and with the Back-Cover Texts as in (a) below.  A copy of the
license is included in the section entitled ``GNU Free Documentation
License.''

(a) The FSF's Back-Cover Text is: ``You have freedom to copy and modify
this GNU Manual, like GNU software.  Copies published by the Free
Software Foundation raise funds for GNU development.''
@end quotation
@end copying

@dircategory Software development
@direntry
* CGDB: (CGDB)GNU Ncurses front end to GDB.
@end direntry

@titlepage
@title CGDB
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Bob Rossi (@email{bob@@brasko.net})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top CGDB
@insertcopying
@end ifnottex

@menu
* Summary::                     Summary of CGDB

* Invocation::                  Getting in and out of CGDB
* Understanding CGDB::          Understanding the core concepts of CGDB
* Controlling CGDB::            CGDB commands
* Configuring CGDB::            CGDB configuration commands
* Sending I/O to Inferior::     Sending I/O to the program being debugged
* Terminal Control Flow::       Allowing terminal control flow in CGDB

* Building CGDB::               Building CGDB from source

* Copying This Manual::

* Index::
@end menu


@node Summary
@unnumbered Summary of CGDB

CGDB is a curses-based interface to the GNU Debugger (GDB).  The goal of CGDB 
is to be lightweight and responsive; not encumbered with unnecessary features.

The interface is designed to deliver the familiar GDB text interface, with a 
split screen showing the source as it executes.  The UI is modeled on the 
classic Unix text editor, vi.  Those familiar with vi should feel right at 
home using CGDB.

The library responsible for communicating with GDB is called Trivial GDB 
(tgdb, or more accurately, libtgdb).  This abstraction allows the UI code to 
be independent of the debugger, as well as greatly simplifying its 
implementation.

Those wanting to develop other interfaces to GDB are welcome to use libtgdb 
as the basis for their program.  Many of the headaches of parsing GDB's output 
and annotations can be avoided by using it.

Some features offered by CGDB are:

@itemize @bullet
@item
Syntax-highlighted source window

@item
Visual breakpoint setting

@item
Keyboard shortcuts for common functions

@item
Searching source window (using regexp)
@end itemize

@node Invocation
@chapter Getting In and Out of CGDB

This chapter discusses how to start CGDB, and how to get out of it.
The essentials are:
@itemize @bullet
@item
type @samp{cgdb} to start CGDB.
@item
type @kbd{quit} or @kbd{C-d} in the GDB window to exit.
@item
type @kbd{:quit} in the source window to exit.  This even works if GDB is 
currently hanging, or operating a long command.
@end itemize

@node Understanding CGDB
@chapter Understanding the core concepts of CGDB

The CGDB user interface currently consists of two windows and a status bar.  
The source window is currently on the top and the GDB window is on the 
bottom.  The status bar currently separates the two windows.

The interface has two modes depending on which window is focused.  CGDB mode
is when the source window is focused, and GDB mode when the GDB window is 
focused.

Beggining with CGDB version 1.0, the windows are movable,
and the user will be able to create as many or as few that is desired. 
Currently however, all of my time is spent developing the interface between
CGDB and GDB. Once this is complete, the UI of CGDB will become much more 
polished.  If you are a ncurses developer, and have spare time to work on this
task, please contact me.

@menu
* Source Window::               Understanding the source window.
* GDB Window::                  Understanding the GDB window.
* File Dialog Window::          Understanding the file dialog window.
* TTY Window::                  Understanding the TTY window.
* Status Bar::                  Understanding the status bar.
* Switching Windows::           Switching between windows.
@end menu

@node Source Window
@section Understanding the source window.

The source window is the window that provides you a view of the source code
that the debugged program is made up of.  It will display to the user a single
source file at a time.  While the user is debugging, via next and step, CGDB
will update the source file and line number to keep you informed as to where
GDB is debugging.

On top of simply showing the source file to the user, CGDB has several
features that make debugging easier than using plain old GDB.  One feature
you will notice right away while debugging a C, C++ or ADA program, is that
the source files are syntax highlighted.  This allows the user to easily 
navigate through the source file to look for certain places in the source 
code.  If you would like to see another source language highlighted, contact 
us.

On top of showing the source code, CGDB also displays to the user the 
currently executing line. The line number will be highlighted green, to
represent that the particular line, is the current line being debugged by GDB.
Also, CGDB will display an arrow extending from the line number, to the 
source line.  You can configure what type of arrow CGDB uses with the
@code{:set arrowstyle} configuration option. By default, the @code{short}
arrow is used.  However, my personal favorite is the @code{long} arrow.

As you navigate through the source window, the current line the cursor is
on will be highlighted white.  This simply helps you keep track of where you
are in the file.

Also, you can set or delete breakpoints in CGDB from the source window.  Simply
navigate to the line that you are interested in setting a breakpoint, and hit
the space bar.  This will set a breakpoint on the line if one did not already 
exist.  The line number should turn red to indicate that a breakpoint has 
been set.  Hitting the space bar again will delete the breakpoint.  If you 
disable the breakpoint, the line number will turn yellow, to represent the
disabled breakpoint.

CGDB also supports regular expression searching within the source window.  If
you type @code{/} or @code{?} you can search in the source window for a string
of interest.  The C library regular expression functions are used to perform 
this search, which honors things like @code{*} or @code{+}.

Please see the list of commands that are available when you are at the source 
window.  They are available here: @xref{CGDB Mode}.

@node GDB Window
@section Understanding the GDB window.

The GDB window is how CGDB allows the user to interface with the GNU debugger.
If the user wishes to pass a command to GDB, it can simply be typed into this
window, and GDB will receive the command.  This interface is intended to be 
100% identical to using GDB on a terminal.

There is a limited set of keys that can be typed into this window that CGDB
interprets and handles, instead of sending to GDB.  This list can be found
here: @xref{GDB Mode}.

CGDB attempts to buffer commands the same way they would be if you typed them
at the terminal.  So, if you type several commands before a single one 
finishes, they will each be run in order.  There will be no way to stop these
commands from being run besides from typing @code{^c}, like you would at any
normal terminal when working with GDB.

@node File Dialog Window
@section Understanding the file dialog window.

The file dialog window is available to help the user view and select which
file they would like to view.  It provides the user with a list of all the
files that make up the program being debugged.  If there are no files 
available, because there is no program being debugged or because there is
no debug symbols, then the file dialog will not open and a message will be 
displayed at the status bar.

You can get to the file dialog by hitting @code{o} when you are at the source
window.  Once you enter the file dialog, it is possible to leave it by hitting 
@code{q}.  You can navigate the file dialog using the standard direction keys
and you can even use regular expression to find your file.  This can save a 
lot of time as the number of files grow.

Please see the list of commands that are available when you are at the file 
dialog.  They are available here: @xref{File Dialog Mode}.

@node TTY Window
@section Understanding the TTY window.

The TTY window is available to allow the user to pass input to the program 
being debugged. This window will act similar to the GDB window, except that
the data you type will get sent to the program being debugged.  
@xref{Sending I/O to Inferior}.

You will notice that the TTY window has a terminal device between it and the 
program being debugged.  So, if the program being debugged uses say readline, 
which allows command line editing, the same interface will be provided via the
TTY window as at the terminal.  You can see the name of the terminal device 
in the TTY status bar.

The commands available while at the TTY window are here: @xref{TTY Mode}.

I personally don't use the TTY window often, and prefer to start the 
application that needs input from stdin on a different terminal.  This 
simplifies the use of CGDB, and works in all cases.

@node Status Bar
@section Understanding the status bar.

The status bar is the general purpose way for CGDB to show the user which
commands they are currently typeing or report errors to the user when they 
occur.  CGDB does not use popup's or other forms of I/O to alert the user 
of information or problems.

While CGDB is running, you can configure it with any of the commands that 
are valid in CGDB's configuration file. @xref{Configuring CGDB}.  Simply
type @code{:} in the source window, and you will see the colon, and 
the rest of the command you type appear in the status bar.  When you are
finished typing the command that you are interested in, type @code{enter}.  
This will alert CGDB to execute the command.

The commands available while at the status bar are here: 
@xref{Status Bar Mode}.

@node Switching Windows
@section Switch between windows

When CGDB is invoked, the interface is in GDB mode.  A '*' at the right
of the status bar indicates that input will be passed to GDB.  To change
the focus to the source window, hit @code{ESC}.  The interface is now in CGDB
mode.

To switch back into GDB mode, press @code{i}.  This syntax is based on the
popular Unix text-editor, vi.

@node Controlling CGDB
@chapter CGDB commands

CGDB can be controlled in a variety of different ways.  Each mode that CGDB 
is in acts differently. Currently CGDB implicitly changes modes depending on 
which window is active.  The following information will help you determine 
what commands are accessible during which modes.

@menu
* CGDB Mode::                   Commands available during CGDB mode
* GDB Mode::                    Commands available during GDB mode
* File Dialog Mode::            Commands available during the file dialog mode
* TTY Mode::                    Commands available during TTY mode
* Status Bar Mode::             Commands available in the status bar
@end menu

@node CGDB Mode
@section Commands available during CGDB mode

When you are in the source window, you are implicitly in CGDB mode.  All of 
the below commands are available during this mode.  This mode is primarily 
available for the user to view the current source file, search it, or switch
to a different mode.

@table @code
@item ESC
Puts the user into command mode. However, you are already in this mode.
@item i
Puts the user into GDB mode.
@item I
Puts the user into tty mode.
@item T
Opens a window to give input to the debugged program.
@item ^T
Opens a new tty for the debugged program.
@item up arrow
Move up a line.
@item j
Move up a line.
@item down arrow
Move down a line.
@item k
Move down a line.
@item left arrow
Move left a line.
@item h
Move left a line.
@item right arrow
Move right a line.
@item l
Move right a line.
@item page up
Move up a page.
@item ^b
Move up a page.
@item ^u
Move up 1/2 a page.
@item page down
Move down a page.
@item ^f
Move down a page.
@item ^d
Move down 1/2 a page.
@item gg
Move to the top of file.
@item G
Move to the bottom of file.
@item /
search from current cursor position.
@item ?
reverse search from current cursor position.
@item n
next forward search.
@item N
next reverse search.
@item o
open the file dialog.
@item spacebar
Sets a breakpoint at the current line number.
@item t
Sets a temporary breakpoint at the current line number.
@item -
Shrink source window 1 line.
@item =
Grow source window 1 line.
@item _
Shrink source window 25% (or, shrink tty window 1 line, if visible).
@item +
Grow source window 25% (or, grow tty window 1 line, if visible).
@item ^l
Clear and redraw the screen.
@end table

@node GDB Mode
@section Commands available during GDB mode

When in GDB mode, the user is mostly interested in working with the GDB 
console.  That is, sending commands to GDB and receiving data back from GDB.
Almost all data passed into this window is directly sent to readline and then
to GDB.

It is important to understand that CGDB parses the keys entered in
the GDB window and has the first chance at dealing with them.  If it is
interested in the keys, it will handle them. Below is a list of keys that
CGDB is interested in, and does not pass along any further.

@table @code
@item ESC
Switch back to source window.
@item page up
Move up a page.
@item page down
Move down a page.
@item F11
Go to the beginning of the GDB buffer.
@item F12
Go to the end of the GDB buffer.
@end table

Any other keys, besides the ones above, CGDB is currently not interested in.  
CGDB will pass along these keys to the readline library. When readline has 
determined that a command has been received, it alerts CGDB, and a command is
then sent to GDB. This is the same method used when invoking GDB directly.

@node File Dialog Mode
@section Commands available during the file dialog mode

The file dialog is primarily used to allow the user to find and open a source
file that the program they are debugging is made up of.  The file dialog will
be full screen, and will list each file that the debugged program is made up 
of.  A usual instance of the file dialog would be to open it up from the 
source window using the @code{o} key, and then to search for the file of 
interest. If you are looking for foo.c type @code{/foo.c}, press @code{enter} 
once to finish the regular expression and again to select the file.

The commands available in the file dialog are:

@table @code
@item q
Will exit the file dialog, and return to the source window.
@item up arrow
Move up a line.
@item k
Move up a line.
@item down arrow
Move down a line.
@item j
Move down a line.
@item right arrow
Move right a line.
@item l
Move right a line.
@item left arrow
Move left a line.
@item h
Move left a line.
@item page up
Move up a page.
@item ^b
Move up a page.
@item page down
Move down a page.
@item ^f
Move down a page.
@item /
search from current cursor position.
@item ?
reverse search from current cursor position.
@item n
next forward search.
@item N
next reverse search.
@item enter
Select the current file.
@end table

@node TTY Mode
@section Commands available during TTY mode

@table @code
@item ESC
Switch back to source window.
@item page up
Move up a page.
@item page down
Move down a page.
@item F11
Go to the beginning of the GDB buffer.
@item F12
Go to the end of the GDB buffer.
@end table

@node Status Bar Mode
@section Commands available in the status bar

Status bar.

@node Configuring CGDB
@chapter CGDB configuration commands

There may be several features that you find useful in CGDB.  CGDB is capable
of automating any of these commands through the use of the config file called
cgdbrc.  It looks in $HOME/.cgdb/cgdbrc for the file.  If it exists, CGDB
executes each line in the file in order.  It is as if the user typed in all the
commands into the status bar after the tui was initialized.

Eventually this file will be used to create macros and high level key 
bindings. Until then, it is a very useful way to automate simple commands.

The following variables change the behavior of some aspect of cgdb.  Many
of these commands may be abbreviated in some way, and all boolean commands
my be negated by appending 'no' to the front.  For example: 
@code{:set ignorecase} turns on case-insensitive searching; while
@code{:set noignorecase} turns on case-sensitive searching.

@table @code
@item :set as
@item :set arrowstyle
values=@sc{short, long, highlight}
Changes the style of the arrow that is used to indicate the currently
executing line in the source viewer.  The default value is short.  A
longer arrow is available, for easier readability.  Finally, the
'highlight' option draws no arrow at all, instead drawing the entire
line in inverse video.
@item :set asr
@item :set autosourcereload
If this is on, CGDB will automatically reload a source file if it has 
changed since CGDB has opened it.  If it is off, the file will never be 
reloaded, until you start CGDB again. The default is off.
This feature is useful when you are debugging a program, then you modify 
a source file, recompile, and 'r' in GDB's CLI window. The file in this 
case will be updated to show the new version.  Note, CGDB only looks at 
the timestamp of the source file to determine if it has changed. So if 
you modify the source file, and didn't recompile yet, CGDB will still 
pick up on the changes.
@item :set escdelay 
Set the length of time to wait before timing out and treating the ESC 
keystroke as the ESC character rather than combining it with other 
characters in the buffer to create a key sequence. The variable is 
measured in milli seconds. If ESCDELAY is 0, the system immediately 
composes the ESCAPE response without waiting for more information 
from the buffer. The user may choose any value between 0 and 10000, 
inclusive. The default setting for the ESCDELAY environment variable is 
40 (forty tenths of a second).
@item :set ic
@item :set ignorecase
Sets searching case insensitive
@item :set sc
@item :set shortcut
Enables shortcut commands typed in source window
@item :set stc
@item :set showtgdbcommands
If this is on, CGDB will show all of the commands that it sends to GDB. 
If it is off, CGDB will not show the commands that it gives to GDB. 
The default is off. 
@item :set syn
@item :set syntax
Sets the current highlighting mode of the current file.
values=@sc{c,ada,off}
@item :set tabstop 
Number of spaces that should be rendered on screen for TAB characters (\t)
@item :set wmh
@item :set winminheight
The minimal height of a window. Windows will never become smaller than 
this value.
@item :set winsplit 
Set the split point between source and gdb window
(especially useful as an init setting in cgdbrc)
values=@sc{top_full, top_big, even, bottom_big, bottom_full}
@item :set ws
@item :set wrapscan
Searches wrap around the end of file.
@item :continue
Send a continue command to GDB.
@item :finish
Send a finish command to gdb
@item :help
This will display the current manual, in text format.
@item :insert
Move focus to the gdb window
@item :next
Send a next command to gdb
@item :quit
Quit cgdb (may be abbreviated as :q)
@item :quit!
Quit cgdb, even if debugged program is running (abbreviated as :q!)
@item :edit
Reloads the file in the source window. This can be useful if the file has 
changed since it was opened by CGDB.  (abbreviated as :e)
@end table

@node Sending I/O to Inferior
@chapter Sending I/O to the program being debugged

If the program being debugged takes input on the terminal it is recommended
that the user start the program on one terminal, and attach to it with CGDB
from another terminal.  This is the easiest way to pass input to the 
debugged program.

However, if the user wishes to pass input to the program being debugged from
within CGDB, there is a mechanism available for doing so.  However, as of this
writing, the technique described below does not work on windows, using a 
natively compiled GDB.  It may work when using the GDB that comes with Cygwin.

This technique is similar to getting in and out of GDB mode.  The tty window 
is not visible by default.  This is because it is only needed if the user 
wishes to send data to the program being debugged.  To display the tty window,
hit @code{'T'} while in command mode.  After hitting @code{'T'} you will 
notice that there is another window in the middle of the 'source window' 
and the 'gdb window'.  This is called the 'tty window'. You will also see a 
new status bar called the tty status bar.  There will be a @code{*} on the tty
status bar after the @code{'T'} was hit.  This is because when the window is
opened with the @code{'T'} command, CGDB automatically puts the user into 
'tty mode'.  To get out of this window hit @code{ESC}.  This will put you back
into command mode.  To make the tty window appear and disappear hit the 
@code{'T'} key while in command mode.  It is a toggle.

Once the tty window is already open, the user can then hit @code{'I'} in
command mode to get into tty mode.  The user can then hit @code{ESC} in tty
mode to get back into command mode.

When the tty window is open, all data that comes from the program, goes
there.  Any data typed into the tty window will ONLY go to the program
being debugged.  It will not go to gdb. When the tty window is closed,
all output from the debugged program will go to the 'gdb window' AND to
the 'tty window' (for viewing later when the tty window is opened). 

If the user wishes to get a new tty for the program being debugged then
they can type 'Control T'. This will delete all the buffered data
waiting to be read into the debugged program. This might be useful when
you rerun or start a new program.

@node Terminal Control Flow
@chapter Allowing terminal control flow in CGDB

A user can typically set there control flow behavior by using the stty 
command like so @code{stty -ixon -ixoff}.  This will disable control flow on
the terminal where CGDB is started.  If you want to turn control flow back 
on you can type @code{stty ixon ixoff}.  If flow control is on, when the user
types @code{^s}, the terminal stops.  When the user types @code{^q}, the 
terminal restarts.  When using readline, the @code{^s} character usually does 
a forward search.  So, if you want to get this, or other functionality out of 
readline, simply turn off control flow and start CGDB.

@node Building CGDB
@chapter Building CGDB from source

Building CGDB from source requires several packages. First, CGDB is hosted
at sf.net/projects/cgdb. You can determine how to get CGDB from source by
looking here: http://sourceforge.net/cvs/?group_id=72581.

Once you have the source to CGDB, now you can begin to build it.  You will of 
course need many packages to build CGDB. Below is a list of all of them 
that are required to build CGDB.

@table @code
@item GNU Make
I have successfully used version 3.79.1, however, older versions probably 
will work.
@item GNU GCC
The GNU C compiler. I've compiled CGDB with versions as old as 2.9.5, and as
new as 4.0.2.
@item GNU Readline
The GNU readline library version 5.1. CGDB will not work with versions before 
5.1.  Readline was modified specifically to work with CGDB.
@item GNU Ncurses
I have successfully used libncurses.so.5 successfully.  However, older versions
probably will work.
@end table

Below is a list of optional packages you will need, if modifying certain files
in CGDB.

@table @code
@item GNU Flex
If you modify any files with an extension of @code{.l}, you will have to have flex 
installed.  I have used flex 2.5.4 to build CGDB.
@item GNU Texinfo
If you modify doc/cgdb.texinfo, then you will be required to have this package
installed.  I have used version 4.7 to build CGDB.
@end table

CGDB uses autoconf/automake to build its configure scripts and makefiles.  So, 
if you change any of the autoconf/automake files, you will need this software 
installed.

@table @code
@item GNU Automake
This has the program acolocl, and must be version Version 1.9.5.
@item GNU Autoconf
This has the program autoconf, and must be version 2.59.
@item GNU m4
This has the program m4, and must be version 1.4.3.
@end table

@node Copying This Manual
@appendix Copying This Manual

@menu
* GNU Free Documentation License::  License for copying this manual.
@end menu

@include fdl.texi


@node Index
@unnumbered Index

@printindex cp

@bye


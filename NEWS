   * It is now required to have the GNU history library in order
   to configure CGDB successfully. This was always the case, but the
   configure checks wouldn't catch it.

   * Get readline configure check to only look for libreadline. Not libedit, ...
   Future version of CGDB will depend on functionality that only readline will
   contains.

cgdb-0.5.2 (05/21/2005)

   * Attempt to get autoconf/automake machinery working with command,
   make DESTDIR=... install. This should simplify the job of package maintainers.

   * Added the --with-readline-prefix autoconf option. This makes configuring CGDB
   much easier when readline is in a non standard place.
   
   * Fixed major bug in CGDB-0.5.1 that prevented it from running on Solaris 9, 
   FreeBSD 5.2.1 and probably many others. CGDB would hang when trying to read
   input. This bug made it impossible to use CGDB on those platforms. libkui is
   the cause of this problem and was a replacement input library for CGDB in 
   cgdb-0.5.1. The bug is now fixed.

cgdb-0.5.1 (04/02/2005)

   * fixed crash when user tries to set a breakpoint on a file that's not 
   a source file. This would happen if you typed ':help' to get into the 
   help, and then tried to set a breakpoint using the spacebar.

   * obsolete the b and f commands. These were responsible for moving between
   the previous and the next source file. They made CGDB unstable and I don't
   think they were in the spirit of a vi/vim clone.

   * fixed an annoying bug that appeared while searching for a string. If you 
   canceled the source view regex search by hitting ESC, 2 bad things would happen.
   You would end up on the line that you cancelled at
   The currently displayed line would stay the line you can cancelled at, even when
   you start moving around again.

   * reworked the signal handling code when GDB dies. Now CGDB handles the SIGCHLD
   and passes the signal notification to TGDB. This fixes a race condition that 
   occurred, even though the race condition appeared to be harmless.
    
   * Several memory runtime fixes found thanks to valgrind. This could potentially
   fix crash's that I just never ran into.
    
   * Fix a bug in the c/c++ syntax highlighter. If a file had a dos file format
   and the C++ style comment // was used, then the file displayed would be 
   completly unreadable. This is because the trailing '\r' would get grouped with
   the comment.

   * Fix CGDB command line interface. If the user invoked CGDB like this,
   'cgdb --args ./main one two three', then CGDB would hang or crash. This
   was because it use to add extra command line options to GDB on the end.
   Now it prepends the options to GDB, so that the --args command line 
   can still be honored.

   * Added new logger interface. This traps all errors to a file or 
   a file descriptor. There is now a mechanism to write warnings and 
   errors to a file for inspection by the user.

   * Removed depricated libinput from the various subdirectory. It has been
   replaced by libkui.

   * Added 'set asr' or autosourcereload option to CGDB. It is off by default.
   It is capable of reloading a source file when CGDB detects that a file has
   been modified. To turn this feature on do ':set asr'.

   * The :edit [:e] colon command has been implemented. It forces CGDB to
   reload the current file in the source viewer.

cgdb-0.5.0 (07/14/2004)

   * "progs" directory is no longer installed in a potentially 
   read-only directory. It is installed now in top_builddir, instead of
   top_srcdir.

   * Added libkui into CGDB. This is the fisrt of the 4 new libraries
   designed to make CGDB flexible and modular. Because of this, the version 
   number has been bumped up to .5.0.

   * Fixed crash in TGDB when buffering commands. If the user hit
   'n' <Enter> <Enter> ... fast, while GDB was not responding, or working
   on a command, the buffering code in TGDB would enter a bad command into
   a queue, causing it to crash when it tries to execute the command.

   * Fix crash in CGDB when parsing command line parameters. I think this crash 
     showed up when I starting compiling CGDB with 3.3 instead of 2.95. It would
     crash when trying to pass the --pid argument to GDB through CGDB.

cgdb-0.4.2 (05/10/2004)

    * CGDB now compiles again on AIX 4.3.  Fixed Makefile.am in various/util/src
      to not have a space between the -L and the path.

cgdb-0.4.1 (04/26/2004)

   * Removed a memory leak from CGDB. When debugging applications that output
   a lot of text, CGDB would reportedly grow well over 400MB. Thanks to the
   sender of this patch, who decided to keep themselves anonymous.

   * Removed all instances of PATH_MAX and replaced with FSUTIL_PATH_MAX.
   PATH_MAX is not defined on HURD, and thus CGDB wouldn't compile in that
   environment.

   * Fixed TGDB bug. Tab completion was broken during cgdb-0.4.0 release.

cgdb-0.4.0 (10/28/2003)
   
   * Added 'wrapscan' option (abbreviated 'ws').  Note that this means that
   'ws' no longer means winsplit, since this isn't the standard vi meaning.
   Fixed bug where 'n' jumps to the top of file when no search was previously
   done.

   * Fixed bug in TGDB. It would not return TGDB_ABSOLUTE_SOURCE_DENIED if 
   TGDB called 'info source' and there was no line that returned the absolute
   source path.
   
   * Fixed bug in TGDB. TGDB would not query GDB for breakpoints on startup.
   However, the user can set breakpoints in there .gdbinit. TGDB now gets all
   breakpoints on startup. This fixes a bug in CGDB. The breakpoint will now
   be highlighted.
   
   * Fixed CGDB bug. When searching for text, CGDB would search for the next
   occurence of the string from where it last found an occurence, rather than
   where the users cursor is.
   
   * Fixed crash in TGDB. It would try to parse watchpoints.
   It will no longer do this.
   
   * Added new feature. CGDB added the 'set showtgdbcommands' option.
   If this is set, CGDB will show all the commands that it is sending
   to GDB to get work done. Otherwise, if its not set, CGDB will not show
   the user the commands. The default value is off. Although, I currently
   have mine set :). After all, you never can be to sure what this 
   program is doing ...
   
   * Fixed bug in TGDB. TGDB used to return a newline for the front end to
   print when a GUI command was issued. This made sure the output of the
   command happened on a different line than the prompt. If the user ran 
   many commands in a row through CGDB, you would see an extra new line
   appear. Now TGDB returns a new line when the command is actually given
   to GDB, not when the command is issued.
   
   * Fixed bug in TGDB. TGDB would not return the correct file:line if the
   user ran a command file through gdb on init and the file instructed gdb
   to set a breakpoint and run. CGDB would display line 1 of the correct 
   file instead of the correct line.
   
   * Fixed bug in TGDB/CGDB. TGDB would return TGDB_UPDATE_SOURCE_FILES when 
   there was no source files in the list ( ex. if the inferior was compiled 
   without debug).  This would cause CGDB to act buggy when the user tried to 
   open the filedlg on a program that was not compiled with debug. The first 
   time you would open the file dialog it would display a blank screen. The 
   second time it would give you an error but it would put you in the file
   dialog mode, even though it displayed the CGDB source window. Both of these
   bugs should be fixed.
   
   * Fixed bug in TGDB/CGDB. It was not properly parsing the breakpoint information
   out of GDB. When using C++, GDB would output data that TGDB did not expect.
   TGDB can now parse the data properly. The result is that CGDB now displays
   all of the breakpoints in the source window. It used to not display them all.

cgdb-0.3.4

   * Fixed bug in cgdb. If the user hit 'o' in cgdb, then got out of the 
   file dialog, the next time ^c was typed in the gdb window, the prompt
   would not refresh itself properly.
   
   * Fixed ada highlighting bug. String literals were not being highlighted.
   
   * Temporarily fixed the ^c bug. The data at the console is now cleared when
   the user hits ^c. A better fix will be arranged for when full signal handling
   support is integrated.
   
   * Fixed libinput bug. If the user held down '\n' for a long time, and then
   hit any other key, an extra '\n' would come out and then the other key.
   This was *very* annoying when holding down the '\n' key to continue nexting.

   * Fixed highlighting bug. This ( '\"' ) would start a string literal 
   in C/C++.

cgdb-0.3.3b

	* Fixed string literal bug where files don't highlight properly in C/C++.

cgdb-0.3.3a

	* Fixed bug in the file dialog window. It would not accept the enter
	key, so the user could never select a file.

cgdb-0.3.3

	* Fixed tab bug, where tab spaces were being displayed incorrectly in 
	the source window. Now cgdb can handle tabs in a file properly.

	* Added VI-style page up/page down commands. Deprecated old Shift-J 
	and Shift-K page up/page down style commands.

	* Fixed bug in ada highlighter. The file would not be displayed correctly 
	when trying to highlight an ada source file.

cgdb-0.3.2

	* Fast tokenizer replaces older hand written one. CGDB now can syntax
	highlight a 15000+ line ada or c file in fractions of a second compared 
	to the second it used to take. Believe me, 1 second to load a file 
	can get frustrating when you wait enough times. :)

	* CGDB now reads $HOME/.cgdb/cgdbrc, this is useful for automating
	any commands the user would normally type into the status bar.
	This is a *great* first attempt at making cgdb configurable.

	* There are *many* new options to type into the status bar, 
	they are all listed in the README file, or from :help, check it out.

- rl branch
  Currently in use to get readline removed from TGDB and put into both the 
  driver and CGDB nativly.

  DONE
  - Fix TODO's in tgdb.c
  - Fix tab completion.
  - Determine who should handle buffering of commands. At least figure out
    how to make it work the way it does now. (TGDB handles the commands, and
    a new callback has been added to the TGDB interface to allow front ends
    to update the display when a console command is sent to GDB)
  - Put the master/slave/tty name in a struct.
  - Make sure prompt change works with a2.
  - Make sure history file is working.
  - Put the readline macro code in a single define?
    Done by moving it into a single location instead (rline).
  - Add testcase to signals.exp. It should put data on the command line, 
    then hit ^c. At this point, type a new command and make sure the original
    data before the ^c is no longer buffered by TGDB. 
  - Remove major duplicated code in CGDB and driver into common area.
  - Remove functions from fork_util if possible. Especially the function that
    puts a PTY between 2 process's. This functionality is no longer needed.
  - Get signal handler working with ^c.
  - Change configure.in to only link against readline 5.1 or greater.

  FUTURE CHANGES (maybe to be made after merge)

  - Currently when buffering commands, data is passed to readline before GDB
    is ready. So while GDB is blocked, you can edit the command through readline. 
    This is does not provide full emulation with GDB. Instead, the user should
    be working via a terminal while GDB is blocked. Once GDB comes back, the 
    user's commands should then be put through readline. Once that is done, the
    user's commands should then be sent to GDB.
